*EXAMPLE 1*
Basic Lambda: Define a lambda expression that takes two integers as arguments and returns their sum. Use auto to infer the return type.
Capture by Value: Write a lambda that captures an integer by value from the enclosing scope, squares it, and returns the result.
Capture by Reference: Create a lambda that captures a string by reference, appends a fixed prefix, and returns the modified string.
Multiple Captures: Construct a lambda that captures two variables (an integer and a boolean) 
by value and performs a conditional operation based on the boolean value.

#include<iostream>
#include<string>
using namespace std;
int main()
{
    auto sum = [](int a, int b) 
    {
        return a + b;
    };
    int sumResult = sum(8,8);
    std::cout<<"Sum: "<<sumResult<<std::endl;
    int value = 8;
    auto squareValue = [value]() 
    {
        return value * value;
    };
    int squareResult = squareValue();
    std::cout<<"Square: "<<squareResult<<std::endl;
    std::string message = "how are you!";
    auto addPrefix = [& message]()
    {
        message = "Hello Akshith" + message;
        return message;
    };
    std::string prefixedMessage = addPrefix();
    std::cout<<"Prefixed Message: "<<prefixedMessage<<std::endl;
    int number = 30;
    bool isDouble = false;
    auto conditionalResult = [number, isDouble]() 
    {
        return isDouble ? number * 2 :number / 2;
    };
    int result= conditionalResult();
    std::cout<<"Conditional Result: "<<result<<std::endl;
    return 0;
}

*TYPE CASTING*
#include<iostream>
using namespace std;
main()
{
    double a = 21.39;
    float b = 10.20;
    int c;
    c= (int) a;
    cout<<"Line 1- value of (int)a is :"<<c<<endl;
    c=(int) b;
    cout<<"Line 2 -value of (int)b is :"<<c<<endl;
    return 0;
}

*IMPLICIT*
#include<iostream>
using namespace std;
int main()
{
    int x= 20;
    int y= 'a';
    x=x+y;
    float z=x+y;
    cout<<"x = "<<x<<endl;
    cout<<"y = "<<y<<endl;
    cout<<"z = "<<z<<endl;
    return 0;
}

*EXPLICIT*
#include<iostream>
using namespace std;
int main()
{
    double x = 1.2;
    int sum = (int)x+1;
    cout<<"Sum = "<<sum;
    return 0;
}

*CONVERSION*
#include<iostream>
using namespace std;
int main()
{
    float f = 4.0;
    int b = static_cast<int>(f);
    cout<<b;
}

#include <iostream>
using namespace std;
int main()
{
    const int d=20;
    int* a=const_cast<int*>(&d);
    *a=100;
    std::cout<<d;
 return 0;
}

*EXAMPLE*
#include <iostream>
using namespace std;
class Base
{
    public:
    virtual void whoami()
    {
        std::cout<<"I am a Base Class object\n";
    }
};
class Derieved :public Base
{
    public:
    void whoami() override
    {
        std::cout<< "I am a Derieved class object\n";
    }
};
int main()
{
    Base* base_ptr = new Derieved;
    Derieved* derieved_ptr = dynamic_cast<Derieved*>(base_ptr);
    if(derieved_ptr != nullptr)
    {
        derieved_ptr->whoami();
    }
    else
    {
        std::cout<<"Case failed:Base object is not actually Derieved\n";
    }
    delete base_ptr;
    return 0;
}

*EXAMPLE*
#include <iostream>
using namespace std;
int main()
{
    int value = 10;
    float* float_ptr = reinterpret_cast<float*>(&value);
    std::cout<<" *float_ptr << std::endl";
    return 0;
}

*EXAMPLE*
#include <iostream>
using namespace std;

// Base class definition
class Base {
public:
    virtual void whoami() {
        std::cout << "I am a Base class object\n";
    }
};

// Derived class definition
class Derived: public Base {
public:
    void whoami() override {
        std::cout << "I am a Derived class object\n";
    }
};

int main() {
    // Static cast example (truncating double to int)
    double num = 3.14159;
    int integer_part = static_cast<int>(num); // Truncates the decimal part
    std::cout << "Original number: " << num << std::endl;
    std::cout << "Integer part: " << integer_part << std::endl;

    // Incorrect upcasting (assuming Derived object but not guaranteed)
    // This could lead to undefined behavior if base_ptr doesn't point to a Derived
    Base* base_ptr = nullptr; // Pointer to a Base class (unknown actual type)

    Derived* derived_ptr = static_cast<Derived*>(base_ptr); // Incorrect approach
    // Safer approach: check the actual type before downcasting
    if (dynamic_cast<Derived*>(base_ptr) != nullptr) {
        derived_ptr = static_cast<Derived*>(base_ptr); // Downcast only if safe
        derived_ptr->whoami(); // Call Derived class's whoami (assuming valid downcast)
    } else {
        std::cout << "Warning: Base object might not be of type Derived\n";
    }

    // Dynamic cast example (safe downcasting with runtime check)
    Base* actual_derived_ptr = new Derived;
    derived_ptr = dynamic_cast<Derived*>(actual_derived_ptr);
    if (derived_ptr != nullptr) {
        derived_ptr->whoami(); // Safe to call Derived's whoami
    } else {
        std::cout << "Cast failed: base object is not actually Derived\n";
    }

    delete actual_derived_ptr; // Release memory

    // Reinterpret cast example (low-level casting, use with caution)
    int value = 10;
    float* float_ptr = reinterpret_cast<float*>(&value); // Accessing memory as a float (undefined behavior if not careful)
    std::cout << "Interpreted value as float: " << *float_ptr << std::endl; // Not recommended, might print garbage

    return 0;
}

*ASSIGNMENT QUESTIONS *
QUESTION 1
Implicit Casting: Write a program that declares an int variable a with the value 10 and a float variable b with the value 3.14. 
Then, perform the division a / b and print the result. Explain how implicit casting works in this scenario.

#CODE:
#include<iostream>
using namespace std;
int main() {
    int a = 10;
    float b = 3.14f;

    float result = a / b;

    std::cout << "Result of a / b: " << result << std::endl;

 return 0;
}

*QUESTION 2
Explicit Casting - Data Loss: Declare an int variable x with the value 256 and a char variable y. 
Assign the value of x to y using explicit casting. Print the value of y.  
Discuss the data loss that might occur and how to avoid it if necessary.
#CODE:
#include<iostream>
using namespace std;
int main() {
    int x = 256;
    char y = static_cast<char>(x);

    std::cout << "Value of x: " << x << std::endl;
    std::cout << "Value of y (after casting): " << static_cast<int>(y) << std::endl;

return 0;
}

*QUESTION 3:
Explicit Casting - Range Conversion: Declare a double variable d with the value 123.456.
 Use explicit casting to convert d to an int variable i and print i.
 Explain the behavior when converting from a larger range to a smaller one.
#CODE:
#include<iostream>
using namespace std;
int main() {
    double d = 123.456;
    int i = static_cast<int>(d);

    std::cout << "Value of d: " << d << std::endl;
    std::cout << "Value of i (after casting): " << i << std::endl;

 return 0;
}

*QUESTION 4*

Casting Pointers - Same Type: Declare an int variable num and an int pointer ptr initialized with the address of num. 
Cast ptr to a float pointer fPtr using explicit casting. Is this casting safe? Why or why not?
#CODE:
#include<iostream>
using namespace std;
int main() {
    int num = 42;
    int* ptr = &num;

    // Explicitly cast int pointer to float pointer
    float* fPtr = reinterpret_cast<float*>(ptr);

    std::cout << "Value of num: " << num << std::endl;
    std::cout << "Value at ptr (int*): " << *ptr << std::endl;
    std::cout << "Value at fPtr (float*): " << *fPtr << std::endl;

 return 0;
}

*QUESTION 5*
Casting Pointers - Different Types: Declare an int variable num and a float variable fval. 
Initialize an int pointer intPtr with the address of num and a float pointer floatPtr with the address of fval. 
Can you safely cast intPtr to floatPtr? Explain.
#CODE:
#include<iostream>
using namespace std;
int main() {
    int num = 42;
    float fval = 3.14;
    int* intPtr = &num;
    float* floatPtr = &fval;
    float* castedFloatPtr = reinterpret_cast<float*>(intPtr);
    std::cout << "Value of num: " << num << std::endl;
    std::cout << "Value at intPtr (int*): " << *intPtr << std::endl;
    std::cout << "Value of fval: " << fval << std::endl;
    std::cout << "Value at floatPtr (float*): " << *floatPtr << std::endl;
    std::cout << "Value at castedFloatPtr (float*): " << *castedFloatPtr << std::endl;
 return 0;
}
*QUESTION 6*
Casting References - Same Type: Declare an int variable x and an int reference refX assigned to x. 
Cast refX to a float reference refF. What happens in this case?
#CODE:
#include<iostream>
using namespace std;
int main() {
    int x = 100;
    int& refX = x;
    float& refF = reinterpret_cast<float&>(refX);
    std::cout << "Value of x: " << x << std::endl;
    std::cout << "Value of refX: " << refX << std::endl;
    std::cout << "Value of refF: " << refF << std::endl;
    refF = 3.14f;
    std::cout << "After modifying refF:" << std::endl;
    std::cout << "Value of x: " << x << std::endl;
    std::cout << "Value of refX: " << refX << std::endl;
    std::cout << "Value of refF: " << refF << std::endl;
return 0;
}
*QUESTION 7*
Casting References - Different Types: Declare an int variable x and a float variable f. Initialize an int reference refX with x. 
Can you cast refX to refer to f? Why or why not?
#CODE:
#include<iostream>
using namespace std;
int main() {
    int x = 25;
    float f = 4.56f;
    int& refX = x;
    float& refF = f;
    std::cout << "Value of x: " << x << std::endl;
    std::cout << "Value of refX: " << refX << std::endl;
    std::cout << "Value of f: " << f << std::endl;
    std::cout << "Value of refF: " << refF << std::endl;
    refF = 7.89f;
    std::cout << "After modifying refF:" << std::endl;
    std::cout << "Value of f: " << f << std::endl;
return 0;
}

*QUESTION 8*
Challenge: Area Calculation (Implicit vs. Explicit): Write two functions to calculate the area of a rectangle. 
One function should take two int arguments for width and height and return an int area. 
The other function should take two double arguments and return a double area. 
Discuss the implications of using implicit and explicit casting in these functions.

#CODE:
#include<iostream>
using namespace std;
int calculateArea(int width, int height) {
    return width * height;
}
double calculateArea(double width, double height) {
    return width * height;
}

int main() {
    int intWidth = 5;
    int intHeight = 10;
    int intArea = calculateArea(intWidth, intHeight);
    std::cout << "Area (int): " << intArea << std::endl;
    double doubleWidth = 5.5;
    double doubleHeight = 10.2;
    double doubleArea = calculateArea(doubleWidth, doubleHeight);
    std::cout << "Area (double): " << doubleArea << std::endl;
    double mixedArea = calculateArea(static_cast<double>(intWidth), doubleHeight);
    std::cout << "Area (mixed, implicit cast): " << mixedArea << std::endl;
    int explicitArea = static_cast<int>(calculateArea(doubleWidth, doubleHeight));
    std::cout << "Area (explicit cast): " << explicitArea << std::endl;
return 0;
}
*QUESTION 9*
Challenge: Temperature Conversion (Casting and Rounding): Create a program that takes a temperature in Celsius as input from the user. 
Use explicit casting and appropriate rounding techniques to convert it to Fahrenheit and print the result.

#CODE:
#include <iostream>
#include <cmath> 
using namespace std;
int main() {
    double celsius;
    std::cout << "Enter temperature in Celsius: ";
    std::cin >> celsius;
    double fahrenheit = (celsius * 9.0 / 5.0) + 32.0;
    int roundedFahrenheit = static_cast<int>(std::floor(fahrenheit + 0.5));
    std::cout << "Temperature in Fahrenheit (rounded): " << roundedFahrenheit << std::endl;
    return 0;
}
*QUESTION 10*
Challenge: Pointer Arithmetic with Casting (Safe vs. Unsafe): Demonstrate safe and unsafe pointer arithmetic with casting. 
Explain the potential consequences of unsafe pointer manipulation.
#CODE:
#include <iostream>

void safePointerArithmetic() {
    int arr[5] = {10, 20, 30, 40, 50};
    int *ptr = arr;

    std::cout << "Safe Pointer Arithmetic:" << std::endl;
    for (int i = 0; i < 5; ++i) {
        std::cout << "Value at ptr + " << i << " : " << *(ptr + i) << std::endl;
    }
}

void unsafePointerArithmetic() {
    int arr[5] = {10, 20, 30, 40, 50};
    int *ptr = arr;

    std::cout << "\nUnsafe Pointer Arithmetic:" << std::endl;
    // Unsafe casting and pointer arithmetic
    long long *longPtr = reinterpret_cast<long long*>(ptr);
    for (int i = 0; i < 2; ++i) {  // Iterating over 2 elements as sizeof(long long) is 8 bytes
        std::cout << "Value at longPtr + " << i << " : " << *(longPtr + i) << std::endl;
    }
}

int main() {
    safePointerArithmetic();
    unsafePointerArithmetic();

    return 0;
}

*STL* STANDARD TEMPLATE 
#include <iostream>
#include <vector>

int main() {
    // create a vector to store int
    std::vector<int> vec;
    int i;

    // display the original size of vec
    std::cout << "vector size: " << vec.size() << std::endl;

    // push 5 values into the vector
    for (i = 10; i < 15; i++) {
        vec.push_back(i);
    }

    // display extended size of vec
    std::cout << "extended vector size: " << vec.size() << std::endl;

    // access 5 values from the vector
    for (i = 0; i < 5; i++) {
        std::cout << "value of vec[" << i << "] - " << vec[i] << std::endl;
    }

    // use iterator to access the values
    std::vector<int>::iterator v = vec.begin();
    while (v != vec.end()) {
        std::cout << "value of v: " << *v << std::endl;
        v++;
    }

    return 0;
}

*LIST cONTINUED*
#include <iostream>
#include <list>

// Function to display the elements of a list
void showlist(std::list<int> g) {
    for (std::list<int>::iterator it = g.begin(); it != g.end(); ++it)
        std::cout << '\t' << *it;
    std::cout << '\n';
}

int main() {
    std::list<int> golist1, golist2;

    for (int i = 0; i < 10; ++i) {
        golist1.push_back(12);
        golist2.push_front(13);
    }

    std::cout << "List 1 (golist1) is: ";
    showlist(golist1);

    std::cout << "\nList 2 (golist2) is: ";
    showlist(golist2);

    std::cout << "\ngolist1.front(): " << golist1.front();
    std::cout << "\ngolist1.back(): " << golist1.back();

    std::cout << "\ngolist1.pop_front(): ";
    golist1.pop_front();
    showlist(golist1);

    std::cout << "\ngolist2.pop_back(): ";
    golist2.pop_back();
    showlist(golist2);

    std::cout << "\ngolist1.reverse(): ";
    golist1.reverse();
    showlist(golist1);

    std::cout << "\ngolist2.sort(): ";
    golist2.sort();
    showlist(golist2);

    return 0;
}
void simple()
{
    const int n=10;
    vector<int>ivec(n);
    for (int i=0;i<10;++i){
        cin>>ivec[i];
    }
    int ia[n];
    for(int j=0;j<n;++j)
    {
        ia[j]=ivec[j]
    }
}

#include <iostream>
#include <vector>
#include <algorithm> // For std::sort
#include <limits>    // For std::numeric_limits

void readIntegers(std::vector<int>& numbers) {
    int number;
    std::cout << "Enter integers (type 'q' to finish):" << std::endl;
    while (std::cin >> number) {
        numbers.push_back(number);
    }

    // Clear the error flag on cin (caused by entering 'q')
    std::cin.clear();
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

void sortIntegers(std::vector<int>& numbers) {
    std::sort(numbers.begin(), numbers.end());
}

void printIntegers(const std::vector<int>& numbers) {
    std::cout << "Sorted integers:" << std::endl;
    for (int num : numbers) {
        std::cout << num << " ";
    }
    std::cout << std::endl;
}

int main() {
    std::vector<int> numbers;

    readIntegers(numbers);
    sortIntegers(numbers);
    printIntegers(numbers);

    return 0;
}


	