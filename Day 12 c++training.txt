#include <iostream>
#include <vector>
#include <algorithm>
int main() {
    // 1. Construction
    std::vector<int> vec1;                          // Default constructor
    std::vector<int> vec2(10, 5);                   // Fill constructor (10 elements with value 5)
    std::vector<int> vec3{1, 2, 3, 4, 5};           // Initializer list constructor
    std::vector<int> vec4(vec3.begin(), vec3.end()); // Range constructor
    std::vector<int> vec5(vec3);                    // Copy constructor
    std::vector<int> vec6(std::move(vec5));         // Move constructor
    // 2. Assignment
    vec1 = vec2;                                    // Copy assignment
    vec1 = std::move(vec2);                         // Move assignment
    vec1 = {10, 20, 30};                            // Initializer list assignment
    // 3. Element Access
    std::cout << "Element at index 1: " << vec1[1] << std::endl;     // Operator[]
    std::cout << "Element at index 2: " << vec1.at(2) << std::endl;  // at()
    std::cout << "First element: " << vec1.front() << std::endl;     // front()
    std::cout << "Last element: " << vec1.back() << std::endl;       // back()
    int* data = vec1.data();                                         // data()
    std::cout << "Element via data pointer: " << data[0] << std::endl;
    // 4. Iterators
    std::cout << "Elements in vec1: ";
    for (auto it = vec1.begin(); it != vec1.end(); ++it) {           // begin() and end()
        std::cout << *it << " ";
    }
    std::cout << std::endl;
    std::cout << "Elements in reverse: ";
    for (auto it = vec1.rbegin(); it != vec1.rend(); ++it) {         // rbegin() and rend()
        std::cout << *it << " ";
    }
    std::cout << std::endl;
    // 5. Capacity
    std::cout << "Size: " << vec1.size() << std::endl;               // size()
    std::cout << "Capacity: " << vec1.capacity() << std::endl;       // capacity()
    std::cout << "Is empty: " << vec1.empty() << std::endl;          // empty()
    vec1.resize(5);                                                  // resize()
    std::cout << "Resized vec1 size: " << vec1.size() << std::endl;
    vec1.reserve(20);                                                // reserve()
    std::cout << "Reserved capacity: " << vec1.capacity() << std::endl;
    // 6. Modifiers
    vec1.assign(7, 100);                                             // assign()
    vec1.push_back(200);                                             // push_back()
    vec1.pop_back();                                                 // pop_back()
    vec1.insert(vec1.begin() + 1, 300);                              // insert()
    vec1.erase(vec1.begin() + 2);                                    // erase()
    vec1.emplace(vec1.begin(), 400);                                 // emplace()
    vec1.emplace_back(500);                                          // emplace_back()
    vec1.swap(vec3);                                                 // swap()
    vec1.clear();                                                    // clear()
    // 7. Non-member Functions
    std::cout << "Is vec1 == vec3? " << (vec1 == vec3) << std::endl; // operator==
    std::swap(vec1, vec3);                                           // swap()
    std::cout << "Elements after swap: ";
    for (const auto& elem : vec1) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;
    // 8. Algorithms
    std::sort(vec1.begin(), vec1.end());                             // sort()
    std::cout << "Sorted elements: ";
    for (const auto& elem : vec1) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;
    return 0;
}


*EXAMPLE 2*
#include <iostream>
#include <vector>
#include <string>

// Define the Product struct
struct Product {
    std::string name;
    double price;

    // Constructor for convenience
    Product(const std::string& name, double price) : name(name), price(price) {}
};

// Function to print the details of a Product
void printProduct(const Product& product) {
    std::cout << "Product Name: " << product.name << ", Price: $" << product.price << std::endl;
}

int main() {
    std::vector<Product> cart;

    // Option 1: Pre-existing product
    Product apple("Apple", 1.99);
    cart.insert(cart.begin(), apple); // Insert apple at the beginning

    // Option 2: Creating Product on the fly
    cart.emplace_back("Banana", 0.79); // Create and insert banana at the end

    // Now cart contains both apple and banana
    // Print the cart contents
    for (const Product& item : cart) {
        printProduct(item);
    }

    return 0;
}

*EXAMPLE*
#include <iostream>
#include <vector>
#include <string>
struct Task {
    std::string description;
    int priority;
    std::string dueDate;
    Task(const std::string& desc, int pri, const std::string& due)
        : description(desc), priority(pri), dueDate(due) {}
};
void printTask(const Task& task) {
    std::cout << "Task: " << task.description << ", Priority: " << task.priority 
              << ", Due Date: " << task.dueDate << std::endl;
}
int main() {
    std::vector<Task> taskList;
    Task task1("Complete project report", 1, "2024-07-15");
    taskList.insert(taskList.begin(), task1); 
    taskList.emplace_back("Prepare for meeting", 2, "2024-07-12"); 
    Task task2("Buy groceries", 3, "2024-07-10");
    taskList.insert(taskList.begin() + 1, task2); 
    taskList.emplace_back("Call plumber", 2, "2024-07-13");
    std::cout << "Task List:" << std::endl;
    for (const Task& task : taskList) {
        printTask(task);
    }

    return 0;
}

*EXAMPLE*
#include <iostream>
#include <vector>
#include <string>
#include <numeric>
struct Student {
    std::string name;
    int id;
    std::vector<int> scores;
    Student(const std::string& name, int id, const std::vector<int>& scores)
        : name(name), id(id), scores(scores) {}
};
void addStudent(std::vector<Student>& students, const std::string& name, int id, const std::vector<int>& scores) {
    students.emplace_back(name, id, scores);
}
Student* findStudentByName(std::vector<Student>& students, const std::string& name) {
    for (auto& student : students) {
        if (student.name == name) {
            return &student;
        }
    }
    return nullptr;
}
Student* findStudentByID(std::vector<Student>& students, int id) {
    for (auto& student : students) {
        if (student.id == id) {
            return &student;
        }
    }
    return nullptr;
}
double calculateAverageScore(const Student& student) {
    if (student.scores.empty()) {
        return 0.0;
    }
    return std::accumulate(student.scores.begin(), student.scores.end(), 0.0) / student.scores.size();
}
double calculateClassAverage(const std::vector<Student>& students) {
    if (students.empty()) {
        return 0.0;
    }
    double totalScore = 0.0;
    int totalCount = 0;
    for (const auto& student : students) {
        totalScore += std::accumulate(student.scores.begin(), student.scores.end(), 0.0);
        totalCount += student.scores.size();
    }
    return totalScore / totalCount;
}
void modifyStudentScore(Student& student, const std::vector<int>& newScores) {
    student.scores = newScores;
}
void printStudent(const Student& student) {
    std::cout << "Name: " << student.name << ", ID: " << student.id << ", Scores: ";
    for (const auto& score : student.scores) {
        std::cout << score << " ";
    }
    std::cout << std::endl;
}
int main() {
    std::vector<Student> students;
    addStudent(students, "Prabha", 1, {90, 85, 88});
    addStudent(students, "Akshith", 2, {75, 80, 78});
    Student* student = findStudentByName(students, "Prabha");
    if (student) {
        printStudent(*student);
    } else {
        std::cout << "Student not found" << std::endl;
    }
    student = findStudentByID(students, 2);
    if (student) {
        printStudent(*student);
    } else {
        std::cout << "Student not found" << std::endl;
    }
    student = findStudentByID(students, 1);
    if (student) {
        std::cout << "Average score for " << student->name << ": " << calculateAverageScore(*student) << std::endl;
    }
    std::cout << "Class average score: " << calculateClassAverage(students) << std::endl;
    student = findStudentByName(students, "Akshith");
    if (student) {
        modifyStudentScore(*student, {82, 84, 88});
        printStudent(*student);
    }

    return 0;
}