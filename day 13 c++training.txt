*EXAMPLE1*
#include<iostream>
#include<vector>
using namespace std;
int main()
{
    std::vector<int>vec;
    vec.push_back(5);
    vec.push_back(5);
    int sum = vec[0]+vec[1];
    std::cout<<"vector elements: ";
    for(int i = 0; i<vec.size(); ++i)
    {
        std::cout<<vec[i]<<" ";
    }
    std::cout<<std::endl;
    std::cout<<"Sum of first two elements: " <<sum<<std::endl;
    return 0;
}

*EXAMPLE 2*
#include <iostream>  
#include <vector>  

using namespace std;

int main() {  
    vector<char> v{'a', 'e', 'i', 'o', 'u'};  
    vector<char>::iterator itr;  
    
    // Use a for loop to iterate through the vector
    for (itr = v.begin(); itr != v.end(); ++itr) {  
        cout << *itr << " ";  // Print each element followed by a space
    }  
    
    cout << endl;

} // Print a newline at the end
    return 0;  
}

*EXAMPLE 3*
#include <iostream>
#include <vector>

using namespace std;

int main() {
    vector<char> v{'a', 'e', 'i', 'o', 'u'};
    vector<char>::reverse_iterator rit;

    // Use a for loop to iterate through the vector in reverse
    for (rit = v.rbegin(); rit != v.rend(); ++rit) {
        cout << *rit << " ";  // Print each element followed by a space
    }

    cout << endl; // Print a newline at the end
    return 0;
}

*Example 4*
#include <iostream>
using namespace std;
template<typename T>
class CustomVector {
private:
    T* array;       
    int capacity;   
    int size;       
public:
    CustomVector() : array(nullptr), capacity(0), size(0) {}
    ~CustomVector() {
    delete[] array;
    }
    void push_back(const T& element) {
    if (size >= capacity) {
   int new_capacity = (capacity == 0) ? 1 : capacity * 2;
  T* new_array = new T[new_capacity];
 for (int i = 0; i < size; ++i) {
 new_array[i] = array[i];
}
delete[] array;
array = new_array;
capacity = new_capacity;
        }
        array[size++] = element;
    }
    T& operator[](int index) {
        if (index < 0 || index >= size) {
            std::cerr << "Error: Index out of bounds" << std::endl;
            exit(1);
        }
        return array[index];
    }
    int getSize() const {
        return size;
    }
    bool empty() const {
        return size == 0;
    }
    void clear() {
        size = 0;
    }
    void pop_back() {
        if (size > 0) {
            --size;
        }
    }
    int getCapacity() const {
        return capacity;
    }
    T addAtIndex(int index1, int index2) {
        if (index1 < 0 || index1 >= size || index2 < 0 || index2 >= size) {
            std::cerr << "Error: Indices out of bounds" << std::endl;
            exit(1); 
        }
        return array[index1] + array[index2];
    }
};

int main() {
    CustomVector<int> vec;
    vec.push_back(10);
    vec.push_back(20);
    vec.push_back(30);
    std::cout << "Elements in CustomVector: ";
    for (int i = 0; i < vec.getSize(); ++i) {
        std::cout << vec[i] << " ";
    }
    std::cout << std::endl;
    int result = vec.addAtIndex(0, 1);
    std::cout << "Result of adding elements at index 0 and 1: " << result << std::endl;
    return 0;

QUEUE::PUSH

#include <iostream>
#include <queue>

using namespace std;

int main() {
    // Create an empty queue
    queue<int> myqueue;

    // Push elements into the queue
    myqueue.push(0);
    myqueue.push(1);
    myqueue.push(2);

    // Print the content of the queue
    cout << "Elements in the queue: ";
    while (!myqueue.empty()) {
        cout << myqueue.front() << " "; // Print the front element
        myqueue.pop(); // Remove the front element
    }
    cout << endl;

    return 0;
}

*QUEUE POP:

#include <iostream>
#include <queue>

using namespace std;

int main() {
    // Create an empty queue
    queue<int> myqueue;

    // Push elements into the queue
    myqueue.push(0);
    myqueue.push(1);
    myqueue.push(2);

    // Remove the first two elements from the queue
    myqueue.pop();
    myqueue.pop();

    // Print the remaining element in the queue
    cout << "Remaining element in the queue: ";
    if (!myqueue.empty()) {
        cout << myqueue.front() << endl;
        myqueue.pop();
    }

    return 0;
}

*STACK CCONTINUED*
#include <iostream>
#include <stack>
using namespace std;

void showstack(stack<int> s) {
    while (!s.empty()) {
        cout << '\t' << s.top();
        s.pop();
    }
    cout << '\n';
}

int main() {
    stack<int> s;

    // Pushing elements into the stack
    s.push(10);
    s.push(30);
    s.push(20);
    s.push(5);
    s.push(1);

    cout << "The stack is: ";
    showstack(s);

    // Displaying stack properties
    cout << "\ns.size(): " << s.size();
    cout << "\ns.top(): " << s.top();

    cout << "\ns.pop(): ";
    s.pop();
    showstack(s);

    return 0;
}

*Example*
#include <iostream>
#include <queue>
#include <stack>
using namespace std;
void reverseQueue(queue<int>& q) {
    stack<int> s;
    while (!q.empty()) {
        s.push(q.front());
        q.pop();
    }
    while (!s.empty()) {
        q.push(s.top());
        s.pop();
    }
}
void printQueue(queue<int> q) {
    while (!q.empty()) {
        cout << q.front() << " ";
        q.pop();
    }
    cout << endl;
}
int main() {
    queue<int> q;
    q.push(5);
    q.push(10);
    q.push(15);
    q.push(20);
    q.push(25);
    cout << "Original queue: ";
    printQueue(q);
    reverseQueue(q);
    cout << "Reversed queue: ";
    printQueue(q);
    return 0;
}

*Example*
#include <iostream>
#include <stack>
using namespace std;
class MaxStack {
private:
    stack<int> mainStack; 
    stack<int> maxStack;  

public:
    void push(int x) {
        mainStack.push(x);
        if (maxStack.empty() || x >= maxStack.top()) {
            maxStack.push(x);
        }
    }
    void pop() {
        if (mainStack.empty()) {
            cout << "Stack is empty" << endl;
            return;
        }
        if (mainStack.top() == maxStack.top()) {
            maxStack.pop();
        }
        mainStack.pop();
    }
    int top() {
        if (mainStack.empty()) {
            cout << "Stack is empty" << endl;
            return -1;
        }
        return mainStack.top();
    }
    int getMax() {
        if (maxStack.empty()) {
            cout << "Stack is empty" << endl;
            return -1;
        }
        return maxStack.top();
    }
    bool empty() {
        return mainStack.empty();
    }
};

int main() {
    MaxStack s;
    s.push(3);
    s.push(5);
    cout << "Current max: " << s.getMax() << endl; 
    s.push(2);
    s.push(1);
    cout << "Current max: " << s.getMax() << endl; 
    s.push(6);
    cout << "Current max: " << s.getMax() << endl; 
    s.pop();
    cout << "Current max: " << s.getMax() << endl; 
    s.pop();
    cout << "Current max: " << s.getMax() << endl; 
    s.pop();
    cout << "Current max: " << s.getMax() << endl; 
    s.pop();
    cout << "Current max: " << s.getMax() << endl; 
    s.pop();
    cout << "Stack empty: " << s.empty() << endl;

    return 0;
}


*Example*
#include <iostream>
using namespace std;
class CircularQueue {
private:
    int *queue;
    int front, rear, capacity;
public:
    CircularQueue(int cap) {
        capacity = cap;
        queue = new int[capacity];
        front = -1;
        rear = -1;
    }
    ~CircularQueue() {
        delete[] queue;
    }
    bool enqueue(int value) {
        if ((rear + 1) % capacity == front) {
            cout << "Queue is full" << endl;
            return false;
        }
        if (front == -1) {
            front = 0;
        }
        rear = (rear + 1) % capacity;
        queue[rear] = value;
        return true;
    }
    bool dequeue() {
        if (front == -1) {
            cout << "Queue is empty" << endl;
            return false;
        }
        if (front == rear) {
            front = -1;
            rear = -1;
        } else {
            front = (front + 1) % capacity;
        }
        return true;
    }
    int getFront() {
        if (front == -1) {
            cout << "Queue is empty" << endl;
            return -1;
        }
        return queue[front];
    }
    bool isEmpty() {
        return front == -1;
    }
    bool isFull() {
        return (rear + 1) % capacity == front;
    }
};
int main() {
    CircularQueue q(5); 
    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);
    q.enqueue(40);
    q.enqueue(50); 
    cout << "Front element: " << q.getFront() << endl; 
    q.dequeue();
    cout << "Front element after dequeue: " << q.getFront() << endl; 
    q.enqueue(60);
    cout << "Front element after enqueue: " << q.getFront() << endl; 
    while (!q.isEmpty()) {
        cout << "Dequeued: " << q.getFront() << endl;
        q.dequeue();
    }
    return 0;
}

*EXAMPLE*
#include <iostream>
#include <stack>
using namespace std;
void sortedInsert(stack<int>& s, int element) {
    if (s.empty() || element > s.top()) {
        s.push(element);
    } else {
        int top = s.top();
        s.pop();
        sortedInsert(s, element);
        s.push(top);
    }
}
void sortStack(stack<int>& s) {
    if (!s.empty()) {
        int top = s.top();
        s.pop();
        sortStack(s);
        sortedInsert(s, top);
    }
}
void printStack(stack<int> s) {
    while (!s.empty()) {
        cout << s.top() << " ";
        s.pop();
    }
    cout << endl;
}
int main() {
    stack<int> s;
    s.push(30);
    s.push(10);
    s.push(20);
    s.push(5);
    s.push(40);
    cout << "Original stack: ";
    printStack(s);
    sortStack(s);
    cout << "Sorted stack: ";
    printStack(s);
    return 0;
}

*EXAMPLE*
#include <iostream>
#include <list>
int main() {
    std::list<int> myList;
    myList.push_back(10);
    myList.push_back(20);
    myList.push_back(30);
    myList.push_front(5);
    myList.push_front(1);
    std::cout << "List after push_back and push_front: ";
    for (int val : myList) {
        std::cout << val << " ";
    }
    std::cout << std::endl;
    auto it = myList.begin();
    std::advance(it, 2);
    myList.insert(it, 15);

    std::cout << "List after insert: ";
    for (int val : myList) {
        std::cout << val << " ";
    }
    std::cout << std::endl;
    it = myList.begin();
    std::advance(it, 3);
    myList.erase(it);
    std::cout << "List after erase: ";
    for (int val : myList) {
        std::cout << val << " ";
    }
    std::cout << std::endl;
    // Remove elements by value
    myList.remove(10);
    std::cout << "List after remove: ";
    for (int val : myList) {
        std::cout << val << " ";
    }
    std::cout << std::endl;
    myList.remove_if([](int n) { return n < 10; });
    std::cout << "List after remove_if: ";
    for (int val : myList) {
        std::cout << val << " ";
    }
    std::cout << std::endl;
    myList.sort();
    std::cout << "List after sort: ";
    for (int val : myList) {
        std::cout << val << " ";
    }
    std::cout << std::endl;
    myList.reverse();
    std::cout << "List after reverse: ";
    for (int val : myList) {
        std::cout << val << " ";
    }
    std::cout << std::endl;
    std::list<int> otherList = {40, 50, 60};
    myList.merge(otherList);
    std::cout << "List after merge: ";
    for (int val : myList) {
        std::cout << val << " ";
    }
    std::cout << std::endl;
    myList.clear();
    std::cout << "List after clear: ";
    for (int val : myList) {
        std::cout << val << " ";
    }
    std::cout << std::endl;
    if (myList.empty()) {
        std::cout << "List is empty." << std::endl;
    }
    myList.push_back(100);
    myList.push_back(200);
    std::cout << "Front element: " << myList.front() << std::endl;
    std::cout << "Back element: " << myList.back() << std::endl;
    return 0;
}