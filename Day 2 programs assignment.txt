Program 1:

1. *Default Constructor:*
   Write a class Student with a default constructor that initializes the student's name to "Unknown" and age to 0. Add a method display to print the student's details.
#include <iostream>
using namespace std;
class Student 
{
    public:
    string name;
    int age;
    Student() 
	{
            name = "Unknown";
            age = 0;
        }
    void display() 
	{
            cout << "Name: " << name << endl;
            cout << "Age: " << age << endl;
        }
};

int main() 
{
    Student student1;
    cout << "Student details:" << endl;
    student1.display();
    return 0;
}

Program 2:
2. *Parameterized Constructor:*
   Write a class Rectangle with a parameterized constructor that initializes the length and width. Add a method area that returns the area of the rectangle.
#include <iostream>
using namespace std;
struct Rectangle {
    double length;
    double width;
Rectangle (double l, double w)
{
    length = l;
    width = w;
}
double area() const
{
    return length * width;
}
};
int main()
{
Rectangle rect(6.0, 3.0);
std::cout<<"Area of Rectangle: "<<rect.area()<<std::endl;
 return 0;
}

Program 3:
3. *Multiple Constructors:*
   Write a class Book that has both a default constructor and a parameterized constructor. The default constructor should set the title to "Unknown" and the number of pages to 0. The parameterized constructor should initialize the title and pages with given values.
#include <iostream>
using namespace std;
class Book {
public:
    const char* title;
    int pages;

    // Default constructor
    Book() {
        title = "Unknown";
        pages = 0;
    }
    Book(const char* t, int p) {
        title = t;
        pages = p;
    }

    // Method to display book details
    void display() const {
        cout << "Title: " << title << endl;
        cout << "Pages: " << pages << endl;
    }
};

int main() {
   
    Book book1;
    cout << "Using default constructor:" << endl;
    book1.display();

   
    Book book2("Kalki", 218);
    cout << "Using parameterized constructor:" << endl;
    book2.display();

return 0;
}

Program 4:
4. *Constructor Overloading:*
   Write a class Complex that represents complex numbers. Implement a default constructor that sets both real and imaginary parts to 0, and a parameterized constructor that takes two arguments to initialize the real and imaginary parts.
#include<iostream>
using namespace std;

class Complex {
public:
    double real;
    double imaginary;

    // Default constructor
    Complex() {
        real = 0.0;
        imaginary = 0.0;
    }

    // Parameterized constructor
    Complex(double r, double i) {
        real = r;
        imaginary = i;
    }

    void display() const {
        cout << "Complex number: " << real << " + " << imaginary << "i" << endl;
    }
};

int main() {
    Complex c1;
    cout << "Using default constructor:" << endl;
    c1.display();

    Complex c2(3.9, 7.9);
    cout << "Using parameterized constructor:" << endl;
    c2.display();

return 0;
}
Program 5:
*Pointer to an Integer:*
   Write a function increment that takes a pointer to an integer and increments its value by 1. Demonstrate the function in the main program.
#include<iostream>
using namespace std;
void increment(int*p)
{
    (*p)++;
}
int main()
{
    int value= 8;
    cout<<"initial value:"<<value<<endl;
    increment(&value);
    cout<<"value after increment: "<<value<<endl;
    return 0;
}
Program 6:
*Pointer to a Class:*
    Write a class Circle with a method area. Create a pointer to an object of this class and call the area method using the pointer.
#include<iostream>
using namespace std;
class circle
{
    private:
    double radius;
    public:
    circle(double r)
    {
        radius = r;
    }
    double area()
    {
        return 3.14*radius *radius;
    }
};
int main()
{
    circle *ptrcircle = new circle (5.0);
    double circlearea = ptrcircle->area();
    cout<<"area of the circle:"<<circlearea<<endl;
    delete ptrcircle;
    return 0;
}
Program 7:
Array of Pointers:*
    Write a program that creates an array of pointers to integers. Initialize the array with values and print them using the pointers.
#include<iostream>
using namespace std;
int main() {
    const int SIZE = 5;
    int *ptrArray[SIZE];
    int values[SIZE] = {20, 40, 60, 80, 100};
     for (int i = 0; i < SIZE; ++i) {
        ptrArray[i] = &values[i];
    }
cout << "Values in the array using pointers:" << endl;
    for (int i = 0; i < SIZE; ++i) {
        cout << *ptrArray[i] << " ";
    }
    cout << endl;

return 0;
}
Program 8:
*Pointer to an Array:*
    Write a function that takes a pointer to an array of integers and the size of the array. The function should print all elements of the array.

#include <iostream>
using namespace std;

// Function to print elements of an array
void printArray(int *arr, int size) {
    for (int i = 0; i < size; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    const int SIZE = 5;
    int values[SIZE] = {10, 20, 30, 40, 50};

    // Call the printArray function
    printArray(values, SIZE);

    return 0;
}
Program 9:
*Dynamic Memory Allocation:*
    Write a program that dynamically allocates memory for an integer, assigns a value to it, and then frees the memory.
#include <iostream>
using namespace std;

int main() {
    // Dynamically allocate memory for an integer
    int* ptr = new int;

    // Assign a value to the dynamically allocated memory
    *ptr = 42;

    // Print the value
    cout << "Value: " << *ptr << endl;

    // Free the dynamically allocated memory
    delete ptr;

    return 0;
}
